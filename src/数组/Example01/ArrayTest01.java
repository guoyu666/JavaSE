package 数组.Example01;

/**
 * 1.java语言中的数组是一种引用数据类型，不属于基本数据类型，数组的父类是Object
 * 2。数组实际上是一个容器，可以同时容纳 多个元素（数组是一个数据的集合）
 * 3.数组当中可以存储“基本数据类型”的数据，也可以存储“引用数据类型”的数据
 * 4.数组因为是引用数据类型，所以数组对象是堆内存区中的
 * 5.数组当中如果存储的是“java对象”的话，实际上存储的是对象的“引用（内存地址）”，数组中不能直接存储java对象
 * 6.数组一旦创建，在java中规定，长度不可变
 * 7.数组的分类：一维数组，二维数组，三维数组
 * 8.所有的数组对象都有length属性（java自带的），用来获取数组中的元素个数
 * 9.java中的数组要求数组中的元素的类型统一
 * 10.数组在内存方面存储的时候，数组中的元素内存地址（存储的每一个元素都是有规则的挨着排列的）是连续的，内存地址连续是数组存储数据的特点。数组实际上是一种简单的数据结构
 * 11.所有的数据都是拿“数组的第一个元素的内存地址”作为整个数组对象的内存地址
 * 12.数组中的每一个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标是：Length-1
 * 13.数组的优缺点：
 * 1.优点：每一个数组元素的内存地址在空间上存储是连续的；
 * 每一个元素类型相同，所以占用空间大小一样；
 * 知道第一个元素的地址，知道每一个元素占用的空间的大小，又知道下标 ，所以通过一个数学表达式就可以计算出某个下标上元素的内存地址，直接通过内存地址定位元素，所以数组的检索效率是
 * 最高的；
 * <p>
 * 2.缺点：由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候效率较低，因为随机增删元素会涉及到后面元素统一向前或者向后位移的操作；
 * 因为很难在内存空间上找到一块特别大的连续的内存空间；
 * 注意：对于数组中最后一个元素的增删，是没有效率影响的；
 * 14.怎么声明/定义一个一维数组？
 * 语法格式：int[] array1
 * 15.怎么初始化一个一维数组？
 * 包括两种方式：静态初始化一维数组，动态初始化一维数组；
 * 1.静态初始化语法格式：int[] array = {100,200,300,400};
 * 2.动态初始化语法格式：int[] array = new int[5];      //这里5表示数组的元素个数，初始化一个5个长度的int类型数组。每个元素的默认值是0
 * String names = new String[6];  //初始化6个长度的String类型数组，每个元素的默认值是null
 */
public class ArrayTest01 {
    public static void main(String[] args) {
        int[] a = {1, 100, 10, 20, 55, 200};    //静态初始化一维数组
        System.out.println("数组中元素的个数：" + a.length);

        System.out.println("第一个元素：" + a[0]);
        System.out.println("最后一个元素：" + a[5]);
        System.out.println("最后一个元素：" + a[a.length - 1]);

        //一维数组遍历
        for (int j : a) {
            System.out.println(j);
        }

        for (int i = a.length - 1; i >= 0; i--) {
            System.out.println(a[i]);

        }


    }


}
